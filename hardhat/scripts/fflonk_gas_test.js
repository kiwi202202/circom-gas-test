const { ethers } = require("hardhat");
const fs = require("fs");
const snarkjs = require("snarkjs");

// Note we should execute at the dir hardhat/
describe("Verifier Contract Gas Test", function () {
  let verifier;
  let Verifier;
  let verifier_addr;

  before(async function () {
    // the verifier.sol in the dir contracts is generated by the sh script in groth16
    Verifier = await ethers.getContractFactory(
      "contracts/verifier.sol:FflonkVerifier"
    );
    verifier = await Verifier.deploy();
    const deployed_verifier = await verifier.waitForDeployment();
    const verifier_addr = await deployed_verifier.getAddress();
    console.log("verifier.sol is deployed to:", verifier_addr);
  });

  it("should test gas consumption", async function () {
    // convert fflonk proof (generated by the sh script in groth16) to calldata onchain
    const proof = JSON.parse(
      fs.readFileSync("../fflonk/build/proof.json", "utf8")
    );
    const publicSignals = JSON.parse(
      fs.readFileSync("../fflonk/build/public.json", "utf8")
    );

    // first, verify the proof using node
    const vKey = JSON.parse(
      fs.readFileSync("../fflonk/build/verification_key.json")
    );

    const res = await snarkjs.fflonk.verify(vKey, publicSignals, proof);

    if (res === true) {
      console.log("Pre-Verification OK");
    } else {
      console.log("Invalid proof");
    }

    const calldataString = await snarkjs.fflonk.exportSolidityCallData(
      publicSignals,
      proof
    );
    let [proofData, pubSignalsData] = calldataString.slice(1, -1).split("],[");

    let proofArray = proofData.split(",").map((item) => item.trim());
    let pubSignalsArray = pubSignalsData.split(",").map((item) => item.trim());

    console.log("publicSignals: ");
    console.log(pubSignalsArray);

    // finally, we estimate the gas consumption using the generated proof and the generated verifier.sol
    async function try_estimateGas() {
      try {
        const gas_consumption = await verifier.verifyProof.estimateGas(
          proofArray,
          pubSignalsArray
        );
        console.log(`Estimated Gas: ${gas_consumption.toString()}`);
      } catch (error) {
        console.error(`Error estimating gas: ${error}`);
      }
    }

    await try_estimateGas();
  });
});
