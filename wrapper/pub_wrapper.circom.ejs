<%
var internalCircuitPath = "path_to_internal_circuit.circom";
var internalCircuitName = "InternalCircuit";
var nPublics = internalInfo.nPublics; 
var publicsBits = internalInfo.publicsBits; 
var totalBits = publicsBits.reduce((sum, bits) => sum + bits, 0); 
%>

include "<%- internalCircuitPath %>";

template Main() {
    signal input in[<%- internalInfo.inputSize %>];
    signal output out;

    component internalCircuit = <%- internalCircuitName %>();
    for (var i = 0; i < <%- internalInfo.inputSize %>; i++) {
        internalCircuit.in[i] <== in[i];
    }

    component hasher = Sha256(<%- totalBits %>);
    component bitsConverters[<%- nPublics %>];

    var offset = 0;

    for (var i = 0; i < <%- nPublics %>; i++) {
        bitsConverters[i] = Num2Bits(<%- publicsBits[i] %>);
        bitsConverters[i].in <== internalCircuit.out[i];

        for (var j = 0; j < <%- publicsBits[i] %>; j++) {
            hasher.in[offset + j] <== bitsConverters[i].out[j];
        }
        offset += <%- publicsBits[i] %>;
    }

    component resultConverter = Bits2Num(256);
    for (var i = 0; i < 256; i++) {
        resultConverter.in[i] <== hasher.out[i];
    }

    out <== resultConverter.out;
}

component main = Main();
